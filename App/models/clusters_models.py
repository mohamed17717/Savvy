from django.db import models
from django.contrib.auth import get_user_model


class DocumentCluster(models.Model):
    """Generated by ML model or Equation or whatever
    Grouping bookmarks blindly without knowing the relation
    """

    # Relations
    user = models.ForeignKey(
        get_user_model(), on_delete=models.CASCADE, related_name='clusters'
    )
    bookmarks = models.ManyToManyField('App.Bookmark', related_name='clusters')

    # Required , can be null and user can set it
    # if it null then it will be calculated using the highest tag
    name = models.CharField(max_length=128)

    # Timing
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    # @property
    # def tags(self):
    #     return ...

    @property
    def general_words_vector(self):
        general_vector = {}
        for b in self.bookmarks.all():
            for word, weight in b.word_vector.items():
                general_vector.setdefault(word, 0)
                general_vector[word] += weight

        return general_vector

    def refresh_labels(self):
        general_vector = self.general_words_vector

        # sort words desc on its general weight
        words = sorted(general_vector.keys(), key=lambda i: -general_vector[i])

        # 2/3 of words consider tops but less than 10
        MAX_WORDS_COUNT = 10
        top_words_count = len(words) * 2 // 3
        top_words_count = min(MAX_WORDS_COUNT, top_words_count)
        top_words = words[:top_words_count]


class Tag(models.Model):
    '''Tag is a stored operation for words table
    weight = sum([word.weight for word in words])
    name = word.name
    bookmarks = bookmarks that related to this word
    alias_name = name by the user
    '''
    user = models.ForeignKey(
        get_user_model(), on_delete=models.CASCADE, related_name='tags'
    )
    # TODO bookmarks should be RCs
    bookmarks = models.ManyToManyField(
        'App.Bookmark', blank=True, related_name='tags')

    # Required
    name = models.CharField(max_length=128)

    # Optional
    alias_name = models.CharField(max_length=128, blank=True, null=True)

    # Computed
    weight = models.PositiveSmallIntegerField(default=0)

    # Timing
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
